# -*- coding: utf-8 -*-
"""Madhav_Panchal_End_Term_Practical.ipynb

Automatically generated by Colab.

"""

# Github link: https://github.com/Madhav1716/Decision-Tree-Classification.git
# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, classification_report
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
import seaborn as sns

# Load dataset
df = pd.read_csv("Lung_Cancer_dataset.csv")

# Inspect dataset
print(df.head())
print(df.info())
print(df.isnull().sum())

# Handle missing values (fill numerical with median)
num_cols = ['Age', 'Smokes', 'AreaQ', 'Alkhol']
for col in num_cols:
    df[col] = df[col].fillna(df[col].median())

# Drop irrelevant columns
df = df.drop(['Name', 'Surname'], axis=1)

# Separate features and target
X = df.drop('Result', axis=1)
y = df['Result']

# Scale features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y, test_size=0.2, random_state=42, stratify=y
)

print("Preprocessing complete!")
print("Training set shape:", X_train.shape)
print("Test set shape:", X_test.shape)

# Initialize and train Decision Tree
dt_model = DecisionTreeClassifier(random_state=42)
dt_model.fit(X_train, y_train)

# Make predictions
y_pred = dt_model.predict(X_test)

# Evaluate performance
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)

print("Decision Tree Evaluation Metrics:")
print(f"Accuracy : {accuracy:.2f}")
print(f"Precision: {precision:.2f}")
print(f"Recall   : {recall:.2f}")
print(f"F1-Score : {f1:.2f}")
print("\nConfusion Matrix:")
print(conf_matrix)
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Feature importance
importances = dt_model.feature_importances_
features = X.columns

feature_importance_df = pd.DataFrame({'Feature': features, 'Importance': importances})
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Plot feature importance
plt.figure(figsize=(8,4))
sns.barplot(x='Importance', y='Feature', data=feature_importance_df)
plt.title("Feature Importance - Decision Tree")
plt.show()

# Apply PCA (retain â‰¥95% variance)
pca = PCA(n_components=0.95, random_state=42)
X_train_pca = pca.fit_transform(X_train)
X_test_pca = pca.transform(X_test)

print(f"Original features: {X_train.shape[1]}")
print(f"Reduced features after PCA: {X_train_pca.shape[1]}")

# Retrain Decision Tree on PCA-transformed data
dt_model_pca = DecisionTreeClassifier(random_state=42)
dt_model_pca.fit(X_train_pca, y_train)

# Predictions
y_pred_pca = dt_model_pca.predict(X_test_pca)

# Evaluate
accuracy_pca = accuracy_score(y_test, y_pred_pca)
precision_pca = precision_score(y_test, y_pred_pca)
recall_pca = recall_score(y_test, y_pred_pca)
f1_pca = f1_score(y_test, y_pred_pca)
conf_matrix_pca = confusion_matrix(y_test, y_pred_pca)

print("\nDecision Tree after PCA Evaluation Metrics:")
print(f"Accuracy : {accuracy_pca:.2f}")
print(f"Precision: {precision_pca:.2f}")
print(f"Recall   : {recall_pca:.2f}")
print(f"F1-Score : {f1_pca:.2f}")
print("\nConfusion Matrix:")
print(conf_matrix_pca)
print("\nClassification Report:")
print(classification_report(y_test, y_pred_pca))

# Comparison table
import pandas as pd

comparison = pd.DataFrame({
    'Metric': ['Accuracy', 'Precision', 'Recall', 'F1-Score'],
    'Baseline DT': [accuracy, precision, recall, f1],
    'DT with PCA': [accuracy_pca, precision_pca, recall_pca, f1_pca]
})

print("Performance Comparison:")
print(comparison)



